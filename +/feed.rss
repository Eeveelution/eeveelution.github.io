<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
    <channel>
        <title>Furball</title>
        <link>https://eeveelution.github.io/+/feed.rss</link>
        <language>en-US</language>
        <description>Creating cursed things out of sheer stubbornness. Software Engineer, Loves tinkering with Retro Hardware. Creating and Playing Games</description>
        <item>
            <title>Up to Speed on SpaceFox</title>
            <description>&lt;p dir=&#34;auto&#34;&gt;&lt;a href=&#34;/+/tag/retrocoding&#34; class=&#34;tag is-info is-light&#34;&gt;#retrocoding&lt;/a&gt; &lt;a href=&#34;/+/tag/spacefox&#34; class=&#34;tag is-info is-light&#34;&gt;#spacefox&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p dir=&#34;auto&#34;&gt;So this is everything I&amp;rsquo;ve done up to this point on SpaceFox, currently there isn&amp;rsquo;t much Game, as I&amp;rsquo;m currently still working on the Fundamentals of everything so here&amp;rsquo;s how that&amp;rsquo;s going:&lt;/p&gt;&#xA;&lt;h1 id=&#34;build-system&#34; dir=&#34;auto&#34;&gt;Build System &lt;a class=&#34;show-on-parent-hover is-hidden has-text-grey&#34; href=&#34;#build-system&#34;&gt;¶&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;p dir=&#34;auto&#34;&gt;I pretty much hate every single build system on the Planet right now (I am also stubborn) and I couldn&amp;rsquo;t figure out a neat way to do what I want while working with Visual C++ 6&amp;rsquo;es compiler, so I just made my own Python script to do it.&lt;/p&gt;&#xA;&lt;p dir=&#34;auto&#34;&gt;Currently it only works with Visual C++ 6&amp;rsquo;es and probably a bit newer compilers, but it lets me specify different configurations aswell as extend existing Configurations.&lt;/p&gt;&#xA;&lt;p dir=&#34;auto&#34;&gt;Here&amp;rsquo;s the Base Configuration of which all further Configurations are made:&lt;/p&gt;&#xA;&lt;p dir=&#34;auto&#34;&gt;&lt;img src=&#34;/public/eba375873b96a1362684a2998ff06ea5de272468afae5c6f32b7d08558a0cee9.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p dir=&#34;auto&#34;&gt;These are pretty much the default build settings of any Visual C++ 6 project. Then it further splits to a Debug and Release Configuration:&lt;/p&gt;&#xA;&lt;p dir=&#34;auto&#34;&gt;&lt;img src=&#34;/public/326d5052df31cdc186027057f95774e645de4a002eb33428c1336302d3b30806.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p dir=&#34;auto&#34;&gt;Then there are more configurations for each of the different Rendering backends. Each rendering backend (OpenGL, Glide, S3 MeTal) has a seperate executable. I feel this is the best way to go about this as some of the Backends may have conflicting functions since all are C APIs. Graphics Backends are also not something that you can change during runtime, and choosing the right one is up to the user for now (Maybe a Launcher that autodetects GPUs could be a thing). The configurations extend the Debug and Release Configurations and add their own Preprocessor Macro to enable a backend. They also add their required .lib files to correctly link.&lt;/p&gt;&#xA;&lt;p dir=&#34;auto&#34;&gt;&lt;img src=&#34;/public/a5da4e71d837b54d00f0eccd7d2d42278e44bbc4bc1fa9a6241f7e36c615c7c2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p dir=&#34;auto&#34;&gt;The rest is pretty simple, the build script ironically only runs on Linux, and generates a .bat file which is run on the target computer. It only runs on linux due to it using the &amp;lsquo;find&amp;rsquo; command and the flags are specific to the Linux find command rather than Windows&amp;rsquo;es. It runs through all *.cpp and *.c files, generates a cl.exe command to build it into a .obj file, and links them all together at the end.&lt;/p&gt;&#xA;&lt;h1 id=&#34;graphics-framework&#34; dir=&#34;auto&#34;&gt;Graphics Framework &lt;a class=&#34;show-on-parent-hover is-hidden has-text-grey&#34; href=&#34;#graphics-framework&#34;&gt;¶&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;p dir=&#34;auto&#34;&gt;To support multiple backends seamlessly, there is a inbetween layer to each Backend. There is a GraphicsBackend Class with virtual methods that are later inherited and implemented by each Backend.&lt;/p&gt;&#xA;&lt;p dir=&#34;auto&#34;&gt;&lt;a href=&#34;/public/e1a471c1bf5b51aef19a26ae9b77793a267d74b18a65aa6e22a6abf72deb806c.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p dir=&#34;auto&#34;&gt;Vertex and &lt;a href=&#34;/index&#34;&gt;Index&lt;/a&gt; Buffers aswell as Textures take a double void pointer, There is no real rule as to what these should be, other than that the Graphics Backend has to recognize these later and be able to work with them. The current OpenGL backend returns a pointer to some memory allocated with &lt;code&gt;malloc&lt;/code&gt; and later derefrences that pointer when Setting the Vertex/Index buffer aswell as when drawing. This has the negligable side effect that everything regarding these objects has to be done through the Backend object, instead of being fully object oriented by having you be able to call methods on the returned double void pointers. I made this decision to simplify the API a bit, aswell as to be able to cheat a bit and reuse a bit of the Data setting code.&lt;/p&gt;&#xA;&lt;p dir=&#34;auto&#34;&gt;All of the Backend API is made with the lowest common denominator in mind. So Textures are only allowed to be Square and Power of 2 sized. The available Vertex Layouts are also the only ones that have 100% support in every planned backend. &lt;code&gt;VertexPositionColor, VertexPositionTexture, VertexPositionColorTexture&lt;/code&gt; Not every Backend has to use the same Models/Textures though, although more on that Later. Some features may be emulated, like the OpenGL backend currently does not use &lt;code&gt;glDrawArrays&lt;/code&gt; or &lt;code&gt;glDrawElements&lt;/code&gt; as those didn&amp;rsquo;t exist in OpenGL 1.1, so this is achived simply through a for loop that then distingluishes between the currently in use Vertex Layout and emits calls to &lt;code&gt;glVertex3f&lt;/code&gt;, &lt;code&gt;glColor4f&lt;/code&gt;, &lt;code&gt;glTexCoord2f&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;resource-handling&#34; dir=&#34;auto&#34;&gt;Resource Handling &lt;a class=&#34;show-on-parent-hover is-hidden has-text-grey&#34; href=&#34;#resource-handling&#34;&gt;¶&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;p dir=&#34;auto&#34;&gt;To make life easier I created a Texture and Model Resource system, which can take in different APIs aswell as Detail levels. Rationale behind taking in API was S3 Compressed Textures. The S3 MeTal API can support S3 Compressed Textures, which don&amp;rsquo;t have a big performance hit and look awesome on S3 Savage Cards. A notable example of these is Unreal Tournament, see &lt;a href=&#34;https://youtu.be/DfjZkL5m4P4?t=675&#34;&gt;LGR&amp;rsquo;s video on this here.&lt;/a&gt;. I chose to support this cuz they look heckin&amp;rsquo; awesome, and so this is why API is also accounted for here.&lt;/p&gt;&#xA;&lt;p dir=&#34;auto&#34;&gt;&lt;img src=&#34;/public/9db712e34999b87eaf429e76d468370a42f8aef487328a236bbf233ab961e37a.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p dir=&#34;auto&#34;&gt;Each Detail Level has a texture, and can have a special texture for each backend. Then each texture just has a path to the file which contains the Texture data, which can have a variety of formats. Of course the special textures per Backend are optional, and if not specified it will just default to whatever the base texture is.&lt;/p&gt;&#xA;&lt;p dir=&#34;auto&#34;&gt;I plan to do the same thing for models but currently I don&amp;rsquo;t have Models implemented, although it likely will b e a quick copy paste job.&lt;/p&gt;&#xA;&lt;h1 id=&#34;what-im-working-on-now-scenes&#34; dir=&#34;auto&#34;&gt;What I&amp;rsquo;m working on now, Scenes &lt;a class=&#34;show-on-parent-hover is-hidden has-text-grey&#34; href=&#34;#what-im-working-on-now-scenes&#34;&gt;¶&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;p dir=&#34;auto&#34;&gt;Currently I&amp;rsquo;m working on Scene handling, which will make it easier to Transition to and from Scenes, like the Main Menu to Ingame or Settings, or whatever else comes later.&lt;/p&gt;&#xA;&lt;p dir=&#34;auto&#34;&gt;&lt;img src=&#34;/public/ab6abe049387ccf0bbb08f811ffd0fd657a34121200ebfd52234048e8f0a567a.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p dir=&#34;auto&#34;&gt;Later there will be a static class called SceneManager which will let me easily change Scenes to different ones. but that&amp;rsquo;s the current thing I&amp;rsquo;ve been working on.&lt;/p&gt;&#xA;&lt;p dir=&#34;auto&#34;&gt;The current &amp;lsquo;main menu&amp;rsquo; or well, rather my Test screen for testing the graphics backend things looks like this:&lt;/p&gt;&#xA;&lt;p dir=&#34;auto&#34;&gt;Loading Content:&lt;/p&gt;&#xA;&lt;p dir=&#34;auto&#34;&gt;&lt;img src=&#34;/public/5b4dddd4b35ed9e1232fe4ff49099bedf0272be53386fbd752f5eee4e962256b.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p dir=&#34;auto&#34;&gt;Drawing:&lt;/p&gt;&#xA;&lt;p dir=&#34;auto&#34;&gt;&lt;img src=&#34;/public/3e4f1f0a9f24eac673358fc69bd47c9f68947f01c585c9903e38bb7954bd789d.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p dir=&#34;auto&#34;&gt;And here&amp;rsquo;s what it looks like on my current Dual Socket 7 PC:&lt;/p&gt;&#xA;&lt;p dir=&#34;auto&#34;&gt;&lt;img src=&#34;/public/4f1e86981454876e4b6f1f21b96b4d8686020c2329d0faead1f7033d2697abb1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p dir=&#34;auto&#34;&gt;And well, that&amp;rsquo;s about all there is to see at the moment. I&amp;rsquo;ll be keeping this updated as the game gets developed more and more but yeah. That&amp;rsquo;s it for now.&lt;/p&gt;&#xA;</description>
            <pubDate>2023-09-19T19:51:48.2165477+02:00</pubDate>
            <guid>Up to Speed on SpaceFox</guid>
            <link>https://eeveelution.github.io/Up%20to%20Speed%20on%20SpaceFox</link>
        </item>
        <item>
            <title>index</title>
            <description>&lt;p dir=&#34;auto&#34;&gt;&lt;b class=&#34;title is-1 has-text-weight-bold&#34;&gt;Furball&amp;rsquo;s Blog!&lt;/b&gt;&lt;/p&gt;&#xA;&lt;p dir=&#34;auto&#34;&gt;So I guess this is the first post here, not sure how often I’ll be posting here, or how many people will be interested, but I’ll keep doing it for fun. Expect mostly Development stuff to be here, or Retro Hardware things. Here’s some of the stuff you could expect me talking about:&lt;/p&gt;&#xA;&lt;ul dir=&#34;auto&#34;&gt;&#xA;&lt;li&gt;Development Progress/Devlogs of my upcoming game SpaceFox&lt;/li&gt;&#xA;&lt;li&gt;Status Updates on my 3 retro machines (AGP Box, AlphaServer, Dual Socket 7)&lt;/li&gt;&#xA;&lt;li&gt;Maybe things about Touhou?&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p dir=&#34;auto&#34;&gt;Post History:&lt;/p&gt;&#xA;&lt;p dir=&#34;auto&#34;&gt;[2023-09-13] &lt;a href=&#34;/Up to Speed on SpaceFox!&#34;&gt;&lt;a href=&#34;/Up%20to%20Speed%20on%20SpaceFox&#34;&gt;Up to Speed on SpaceFox&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;&#xA;</description>
            <pubDate>2023-09-19T19:09:40.2378419+02:00</pubDate>
            <guid>index</guid>
            <link>https://eeveelution.github.io/index</link>
        </item>
    </channel>
</rss>